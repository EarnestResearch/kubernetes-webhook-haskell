name:                kubernetes-webhook-haskell
version:             0.1.0.0
synopsis:            Create Kubernetes Admission Webhooks in Haskell
homepage:            https://github.com/githubuser/kubernetes-webhook-haskell#readme
license:             MIT
license-file:        LICENSE
author:              Alessandro Marrella
maintainer:          amarrella@earnestresearch.com
copyright:           2020 Alessandro Marrella
category:            Web
build-type:          Simple
extra-source-files:  README.md
cabal-version:       >=1.10
description:
    This library lets you create [Kubernetes Admission Webhooks](https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/) in Haskell.

    Using webhooks in Kubernetes requires some configuration, in the [dhall](./dhall) directory you can find some useful templates that you can reuse to deploy your webhooks. [cert-manager](https://cert-manager.io/docs/) is required to be installed in the cluster to use the templates.

    Example webhook using Servant:
    ```hs
    module Kubernetes.Example
        ( startApp,
        app,
        )
    where

    import Control.Monad.IO.Class
    import qualified Data.Aeson as A
    import qualified Data.ByteString as BS
    import qualified Data.HashMap.Strict as HM
    import Data.Text
    import GHC.Generics
    import qualified Kubernetes.Webhook as W
    import Network.Wai
    import Network.Wai.Handler.Warp
    import Network.Wai.Handler.WarpTLS
    import Servant
    import System.Environment

    type API =
    "mutate" :> ReqBody '[JSON] W.AdmissionReviewRequest :> Post '[JSON] W.AdmissionReviewResponse

    data Toleration
    = Toleration
        { effect :: Maybe TolerationEffect,
            key :: Maybe Text,
            operator :: Maybe TolerationOperator,
            tolerationSeconds :: Maybe Integer,
            value :: Maybe Text
        }
    deriving (Generic, A.ToJSON)

    data TolerationEffect = NoSchedule | PreferNoSchedule | NoExecute deriving (Generic, A.ToJSON)

    data TolerationOperator = Exists | Equal deriving (Generic, A.ToJSON)

    testToleration :: Toleration
    testToleration =
    Toleration
        { effect = Just NoSchedule,
        key = Just "dedicated",
        operator = Just Equal,
        tolerationSeconds = Nothing,
        value = Just "test"
        }

    startApp :: IO ()
    startApp = do
    let tlsOpts = tlsSettings "/certs/tls.crt" "/certs/tls.key"
        warpOpts = setPort 8080 defaultSettings
    runTLS tlsOpts warpOpts app

    app :: Application
    app = serve api server

    api :: Proxy API
    api = Proxy

    server :: Server API
    server = mutate

    mutate :: W.AdmissionReviewRequest -> Handler W.AdmissionReviewResponse
    mutate req = pure $ W.mutatingWebhook req (\_ -> Right W.Allowed) addToleration

    addToleration :: W.Patch
    addToleration = 
    W.Patch
        [ W.PatchOperation
            { op = W.Add,
            path = "/spec/tolerations/-",
            from = Nothing,
            value = Just $ A.toJSON testToleration
            }
        ]
    ```



library
  hs-source-dirs:      src
  exposed-modules:     Kubernetes.Webhook, Kubernetes.Webhook.Types
  build-depends:       aeson                >= 1.4.6 && < 1.5,
                       base                 >= 4.7 && < 5,
                       base64-bytestring    >= 1.0.0 && < 1.1,
                       binary               >= 0.8.6 && < 0.9,
                       bytestring           >= 0.10.8 && < 0.11,
                       text                 >= 1.2.3 && < 1.3,
                       unordered-containers >= 0.2.10 && < 0.3
                       
  default-language:    Haskell2010

source-repository head
  type:     git
  location: https://github.com/EarnestResearch/kubernetes-webhook-haskell
